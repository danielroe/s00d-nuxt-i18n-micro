import{_ as e,c as i,o as t,a4 as a}from"./chunks/framework.CkFA-2kL.js";const k=JSON.parse('{"title":"📢 Events","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/events.md","filePath":"api/events.md","lastUpdated":1724243643000}'),s={name:"api/events.md"},n=a(`<h1 id="📢-events" tabindex="-1">📢 Events <a class="header-anchor" href="#📢-events" aria-label="Permalink to &quot;📢 Events&quot;">​</a></h1><h2 id="🔄-i18n-register" tabindex="-1">🔄 <code>i18n:register</code> <a class="header-anchor" href="#🔄-i18n-register" aria-label="Permalink to &quot;🔄 \`i18n:register\`&quot;">​</a></h2><p>The <code>i18n:register</code> event is a key feature in <code>Nuxt I18n Micro</code>, enabling the dynamic addition of new translations to your application&#39;s global i18n context. This event ensures that internationalization is seamless and flexible, allowing you to integrate additional translations as needed.</p><h3 id="📝-event-details" tabindex="-1">📝 Event Details <a class="header-anchor" href="#📝-event-details" aria-label="Permalink to &quot;📝 Event Details&quot;">​</a></h3><ul><li><p><strong>Purpose</strong>:</p><ul><li>This event allows for the dynamic incorporation of additional translations into the existing set for a specific locale.</li></ul></li><li><p><strong>Payload</strong>:</p><ul><li><strong><code>registerI18nModule</code></strong>: <ul><li>A function provided by the event that takes two arguments: <ul><li><strong><code>translations</code></strong> (<code>Translations</code>): <ul><li>An object containing key-value pairs that represent the translations, organized according to the <code>Translations</code> interface.</li></ul></li><li><strong><code>locale</code></strong> (<code>string</code>): <ul><li>The locale code (e.g., <code>&#39;en&#39;</code>, <code>&#39;ru&#39;</code>) for which the translations are being registered.</li></ul></li></ul></li></ul></li></ul></li><li><p><strong>Behavior</strong>:</p><ul><li>When the event is triggered, the <code>registerI18nModule</code> function is called with the provided <code>translations</code> and <code>locale</code>.</li><li>This function merges the new translations into the global translation context for the specified locale, updating the available translations across the application.</li></ul></li></ul><h3 id="💡-example-usage" tabindex="-1">💡 Example Usage <a class="header-anchor" href="#💡-example-usage" aria-label="Permalink to &quot;💡 Example Usage&quot;">​</a></h3><p>Here’s how you might use the <code>i18n:register</code> event to add new translations dynamically:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nuxt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i18n:register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registerI18nModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  registerI18nModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;farewell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Goodbye&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="🛠️-explanation" tabindex="-1">🛠️ Explanation: <a class="header-anchor" href="#🛠️-explanation" aria-label="Permalink to &quot;🛠️ Explanation:&quot;">​</a></h3><ul><li><strong>Triggering the Event</strong>: <ul><li>The event is hooked into the <code>i18n:register</code> lifecycle event provided by <code>Nuxt I18n Micro</code>.</li></ul></li><li><strong>Adding Translations</strong>: <ul><li>In the example, the English translations for <code>&quot;greeting&quot;</code> and <code>&quot;farewell&quot;</code> are registered.</li><li>The <code>registerI18nModule</code> function merges these new translations into the existing set for the <code>&#39;en&#39;</code> locale.</li></ul></li></ul><h3 id="🔗-key-benefits" tabindex="-1">🔗 Key Benefits <a class="header-anchor" href="#🔗-key-benefits" aria-label="Permalink to &quot;🔗 Key Benefits&quot;">​</a></h3><ul><li><strong>Dynamic Updates</strong>: <ul><li>Easily update or add translations without redeploying your entire application.</li></ul></li><li><strong>Localization Flexibility</strong>: <ul><li>Allows for real-time localization adjustments based on user or application needs.</li></ul></li></ul><p>By leveraging the <code>i18n:register</code> event, you can ensure that your application&#39;s localization strategy remains flexible and adaptive to changing requirements, enhancing the overall user experience.</p>`,13),l=[n];function o(r,d,h,c,p,g){return t(),i("div",null,l)}const E=e(s,[["render",o]]);export{k as __pageData,E as default};
